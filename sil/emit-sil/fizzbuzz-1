sil_stage canonical

import Builtin
import Swift
import SwiftShims

func fizzbuzz(n: Int) -> String

// main
sil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  %2 = alloc_stack $IndexingIterator<ClosedRange<Int>>, var, name "$n$generator" // users: %30, %68, %35
  %3 = alloc_stack $ClosedRange<Int>              // users: %20, %24, %32
  %4 = metatype $@thin Int.Type
  %5 = integer_literal $Builtin.Int64, 1          // user: %6
  %6 = struct $Int (%5 : $Builtin.Int64)          // user: %13
  %7 = integer_literal $Builtin.Int64, 100        // user: %8
  %8 = struct $Int (%7 : $Builtin.Int64)          // user: %15
  br bb1                                          // id: %9

bb1:                                              // Preds: bb0
  br bb2                                          // id: %10

bb2:                                              // Preds: bb1
  %11 = metatype $@thin ClosedRange<Int>.Type     // user: %19
  %12 = alloc_stack $Int                          // users: %17, %13, %22
  store %6 to %12 : $*Int                         // id: %13
  %14 = alloc_stack $Int                          // users: %18, %15, %21
  store %8 to %14 : $*Int                         // id: %15
  // function_ref specialized ClosedRange.init(uncheckedBounds:)
  %16 = function_ref @$SSN15uncheckedBoundsSNyxGx5lower_x5uppert_tcfCSi_Tg5 : $@convention(method) (Int, Int, @thin ClosedRange<Int>.Type) -> ClosedRange<Int> // user: %19
  %17 = load %12 : $*Int                          // user: %19
  %18 = load %14 : $*Int                          // user: %19
  %19 = apply %16(%17, %18, %11) : $@convention(method) (Int, Int, @thin ClosedRange<Int>.Type) -> ClosedRange<Int> // user: %20
  store %19 to %3 : $*ClosedRange<Int>            // id: %20
  dealloc_stack %14 : $*Int                       // id: %21
  dealloc_stack %12 : $*Int                       // id: %22
  br bb3                                          // id: %23

bb3:                                              // Preds: bb2
  %24 = load %3 : $*ClosedRange<Int>              // user: %26
  %25 = alloc_stack $ClosedRange<Int>             // users: %28, %26, %31
  store %24 to %25 : $*ClosedRange<Int>           // id: %26
  // function_ref specialized Collection<>.makeIterator()
  %27 = function_ref @$SSlss16IndexingIteratorVyxG0B0RtzrlE04makeB0ACyFSNySiG_Tg5 : $@convention(method) (ClosedRange<Int>) -> IndexingIterator<ClosedRange<Int>> // user: %29
  %28 = load %25 : $*ClosedRange<Int>             // user: %29
  %29 = apply %27(%28) : $@convention(method) (ClosedRange<Int>) -> IndexingIterator<ClosedRange<Int>> // user: %30
  store %29 to %2 : $*IndexingIterator<ClosedRange<Int>> // id: %30
  dealloc_stack %25 : $*ClosedRange<Int>          // id: %31
  dealloc_stack %3 : $*ClosedRange<Int>           // id: %32
  br bb4                                          // id: %33

bb4:                                              // Preds: bb6 bb3
  %34 = alloc_stack $Optional<Int>                // users: %38, %40, %41
  %35 = begin_access [modify] [static] %2 : $*IndexingIterator<ClosedRange<Int>> // users: %37, %39
  // function_ref specialized IndexingIterator.next()
  %36 = function_ref @$Ss16IndexingIteratorV4next7ElementQzSgyFSNySiG_Tg5 : $@convention(method) (@inout IndexingIterator<ClosedRange<Int>>) -> Optional<Int> // user: %37
  %37 = apply %36(%35) : $@convention(method) (@inout IndexingIterator<ClosedRange<Int>>) -> Optional<Int> // user: %38
  store %37 to %34 : $*Optional<Int>              // id: %38
  end_access %35 : $*IndexingIterator<ClosedRange<Int>> // id: %39
  %40 = load %34 : $*Optional<Int>                // user: %42
  dealloc_stack %34 : $*Optional<Int>             // id: %41
  switch_enum %40 : $Optional<Int>, case #Optional.some!enumelt.1: bb6, case #Optional.none!enumelt: bb5 // id: %42

bb5:                                              // Preds: bb4
  br bb7                                          // id: %43

// %44                                            // users: %56, %45
bb6(%44 : $Int):                                  // Preds: bb4
  debug_value %44 : $Int, let, name "n"           // id: %45
  %46 = integer_literal $Builtin.Word, 1          // user: %48
  // function_ref specialized _allocateUninitializedArray<A>(_:)
  %47 = function_ref @$Ss27_allocateUninitializedArrayySayxG_BptBwlFyp_Tg5 : $@convention(thin) (Builtin.Word) -> (@owned Array<Any>, Builtin.RawPointer) // user: %48
  %48 = apply %47(%46) : $@convention(thin) (Builtin.Word) -> (@owned Array<Any>, Builtin.RawPointer) // users: %51, %49, %52
  %49 = tuple_extract %48 : $(Array<Any>, Builtin.RawPointer), 0 // users: %66, %63, %50
  retain_value %49 : $Array<Any>                  // id: %50
  %51 = tuple_extract %48 : $(Array<Any>, Builtin.RawPointer), 1 // user: %53
  release_value %48 : $(Array<Any>, Builtin.RawPointer) // id: %52
  %53 = pointer_to_address %51 : $Builtin.RawPointer to [strict] $*Any // user: %54
  %54 = init_existential_addr %53 : $*Any, $String // user: %57
  // function_ref fizzbuzz(n:)
  %55 = function_ref @$S8fizzbuzzAA1nSSSi_tF : $@convention(thin) (Int) -> @owned String // user: %56
  %56 = apply %55(%44) : $@convention(thin) (Int) -> @owned String // user: %57
  store %56 to %54 : $*String                     // id: %57
  // function_ref default argument 1 of print(_:separator:terminator:)
  %58 = function_ref @$Ss5print_9separator10terminatoryypd_S2StFfA0_ : $@convention(thin) () -> @owned String // user: %59
  %59 = apply %58() : $@convention(thin) () -> @owned String // users: %65, %63
  // function_ref default argument 2 of print(_:separator:terminator:)
  %60 = function_ref @$Ss5print_9separator10terminatoryypd_S2StFfA1_ : $@convention(thin) () -> @owned String // user: %61
  %61 = apply %60() : $@convention(thin) () -> @owned String // users: %64, %63
  // function_ref print(_:separator:terminator:)
  %62 = function_ref @$Ss5print_9separator10terminatoryypd_S2StF : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> () // user: %63
  %63 = apply %62(%49, %59, %61) : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> ()
  release_value %61 : $String                     // id: %64
  release_value %59 : $String                     // id: %65
  release_value %49 : $Array<Any>                 // id: %66
  br bb4                                          // id: %67

bb7:                                              // Preds: bb5
  dealloc_stack %2 : $*IndexingIterator<ClosedRange<Int>> // id: %68
  %69 = integer_literal $Builtin.Int32, 0         // user: %70
  %70 = struct $Int32 (%69 : $Builtin.Int32)      // user: %71
  return %70 : $Int32                             // id: %71
} // end sil function 'main'

// fizzbuzz(n:)
sil hidden @$S8fizzbuzzAA1nSSSi_tF : $@convention(thin) (Int) -> @owned String {
// %0                                             // users: %49, %26, %3, %73, %1
bb0(%0 : $Int):
  debug_value %0 : $Int, let, name "n", argno 1   // id: %1
  %2 = integer_literal $Builtin.Int64, 15         // user: %9
  %3 = struct_extract %0 : $Int, #Int._value      // users: %9, %6
  br bb1                                          // id: %4

bb1:                                              // Preds: bb0
  %5 = integer_literal $Builtin.Int64, -9223372036854775808 // user: %6
  %6 = builtin "cmp_eq_Int64"(%3 : $Builtin.Int64, %5 : $Builtin.Int64) : $Builtin.Int1 // user: %7
  cond_br %6, bb2, bb3                            // id: %7

bb2:                                              // Preds: bb1
  br bb3                                          // id: %8

bb3:                                              // Preds: bb2 bb1
  %9 = builtin "srem_Int64"(%3 : $Builtin.Int64, %2 : $Builtin.Int64) : $Builtin.Int64 // user: %10
  %10 = struct $Int (%9 : $Builtin.Int64)         // user: %13
  br bb4                                          // id: %11

bb4:                                              // Preds: bb3
  %12 = integer_literal $Builtin.Int64, 0         // user: %14
  %13 = struct_extract %10 : $Int, #Int._value    // user: %14
  %14 = builtin "cmp_eq_Int64"(%13 : $Builtin.Int64, %12 : $Builtin.Int64) : $Builtin.Int1 // user: %15
  %15 = struct $Bool (%14 : $Builtin.Int1)        // user: %16
  %16 = struct_extract %15 : $Bool, #Bool._value  // user: %17
  cond_br %16, bb5, bb6                           // id: %17

bb5:                                              // Preds: bb4
  %18 = string_literal utf8 "FizzBuzz"            // user: %23
  %19 = integer_literal $Builtin.Word, 8          // user: %23
  %20 = integer_literal $Builtin.Int1, -1         // user: %23
  %21 = metatype $@thin String.Type               // user: %23
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %22 = function_ref @$SSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %23
  %23 = apply %22(%18, %19, %20, %21) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %24
  br bb19(%23 : $String)                          // id: %24

bb6:                                              // Preds: bb4
  %25 = integer_literal $Builtin.Int64, 5         // user: %32
  %26 = struct_extract %0 : $Int, #Int._value     // users: %32, %29
  br bb7                                          // id: %27

bb7:                                              // Preds: bb6
  %28 = integer_literal $Builtin.Int64, -9223372036854775808 // user: %29
  %29 = builtin "cmp_eq_Int64"(%26 : $Builtin.Int64, %28 : $Builtin.Int64) : $Builtin.Int1 // user: %30
  cond_br %29, bb8, bb9                           // id: %30

bb8:                                              // Preds: bb7
  br bb9                                          // id: %31

bb9:                                              // Preds: bb8 bb7
  %32 = builtin "srem_Int64"(%26 : $Builtin.Int64, %25 : $Builtin.Int64) : $Builtin.Int64 // user: %33
  %33 = struct $Int (%32 : $Builtin.Int64)        // user: %36
  br bb10                                         // id: %34

bb10:                                             // Preds: bb9
  %35 = integer_literal $Builtin.Int64, 0         // user: %37
  %36 = struct_extract %33 : $Int, #Int._value    // user: %37
  %37 = builtin "cmp_eq_Int64"(%36 : $Builtin.Int64, %35 : $Builtin.Int64) : $Builtin.Int1 // user: %38
  %38 = struct $Bool (%37 : $Builtin.Int1)        // user: %39
  %39 = struct_extract %38 : $Bool, #Bool._value  // user: %40
  cond_br %39, bb11, bb12                         // id: %40

bb11:                                             // Preds: bb10
  %41 = string_literal utf8 "Buzz"                // user: %46
  %42 = integer_literal $Builtin.Word, 4          // user: %46
  %43 = integer_literal $Builtin.Int1, -1         // user: %46
  %44 = metatype $@thin String.Type               // user: %46
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %45 = function_ref @$SSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %46
  %46 = apply %45(%41, %42, %43, %44) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %47
  br bb19(%46 : $String)                          // id: %47

bb12:                                             // Preds: bb10
  %48 = integer_literal $Builtin.Int64, 3         // user: %55
  %49 = struct_extract %0 : $Int, #Int._value     // users: %55, %52
  br bb13                                         // id: %50

bb13:                                             // Preds: bb12
  %51 = integer_literal $Builtin.Int64, -9223372036854775808 // user: %52
  %52 = builtin "cmp_eq_Int64"(%49 : $Builtin.Int64, %51 : $Builtin.Int64) : $Builtin.Int1 // user: %53
  cond_br %52, bb14, bb15                         // id: %53

bb14:                                             // Preds: bb13
  br bb15                                         // id: %54

bb15:                                             // Preds: bb14 bb13
  %55 = builtin "srem_Int64"(%49 : $Builtin.Int64, %48 : $Builtin.Int64) : $Builtin.Int64 // user: %56
  %56 = struct $Int (%55 : $Builtin.Int64)        // user: %59
  br bb16                                         // id: %57

bb16:                                             // Preds: bb15
  %58 = integer_literal $Builtin.Int64, 0         // user: %60
  %59 = struct_extract %56 : $Int, #Int._value    // user: %60
  %60 = builtin "cmp_eq_Int64"(%59 : $Builtin.Int64, %58 : $Builtin.Int64) : $Builtin.Int1 // user: %61
  %61 = struct $Bool (%60 : $Builtin.Int1)        // user: %62
  %62 = struct_extract %61 : $Bool, #Bool._value  // user: %63
  cond_br %62, bb17, bb18                         // id: %63

bb17:                                             // Preds: bb16
  %64 = string_literal utf8 "Fizz"                // user: %69
  %65 = integer_literal $Builtin.Word, 4          // user: %69
  %66 = integer_literal $Builtin.Int1, -1         // user: %69
  %67 = metatype $@thin String.Type               // user: %69
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %68 = function_ref @$SSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %69
  %69 = apply %68(%64, %65, %66, %67) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %70
  br bb19(%69 : $String)                          // id: %70

bb18:                                             // Preds: bb16
  %71 = metatype $@thin String.Type               // user: %75
  %72 = alloc_stack $Int                          // users: %73, %76, %75
  store %0 to %72 : $*Int                         // id: %73
  // function_ref String.init<A>(_:)
  %74 = function_ref @$SSSySSxcs25LosslessStringConvertibleRzlufC : $@convention(method) <τ_0_0 where τ_0_0 : LosslessStringConvertible> (@in τ_0_0, @thin String.Type) -> @owned String // user: %75
  %75 = apply %74<Int>(%72, %71) : $@convention(method) <τ_0_0 where τ_0_0 : LosslessStringConvertible> (@in τ_0_0, @thin String.Type) -> @owned String // user: %77
  dealloc_stack %72 : $*Int                       // id: %76
  br bb19(%75 : $String)                          // id: %77

// %78                                            // user: %79
bb19(%78 : $String):                              // Preds: bb18 bb17 bb11 bb5
  return %78 : $String                            // id: %79
} // end sil function '$S8fizzbuzzAA1nSSSi_tF'

// Int.init(_builtinIntegerLiteral:)
sil public_external [transparent] [serialized] @$SSi22_builtinIntegerLiteralSiBi2048__tcfC : $@convention(method) (Builtin.Int2048, @thin Int.Type) -> Int {
// %0                                             // user: %2
bb0(%0 : $Builtin.Int2048, %1 : $@thin Int.Type):
  %2 = builtin "s_to_s_checked_trunc_Int2048_Int64"(%0 : $Builtin.Int2048) : $(Builtin.Int64, Builtin.Int1) // user: %3
  %3 = tuple_extract %2 : $(Builtin.Int64, Builtin.Int1), 0 // user: %4
  %4 = struct $Int (%3 : $Builtin.Int64)          // user: %5
  return %4 : $Int                                // id: %5
} // end sil function '$SSi22_builtinIntegerLiteralSiBi2048__tcfC'

// static Int.% infix(_:_:)
sil public_external [transparent] [serialized] @$SSi1roiyS2i_SitFZ : $@convention(method) (Int, Int, @thin Int.Type) -> Int {
// %0                                             // user: %3
// %1                                             // user: %5
bb0(%0 : $Int, %1 : $Int, %2 : $@thin Int.Type):
  %3 = struct_extract %0 : $Int, #Int._value      // users: %17, %11
  %4 = integer_literal $Builtin.Int64, 0          // user: %6
  %5 = struct_extract %1 : $Int, #Int._value      // users: %17, %14, %6
  %6 = builtin "cmp_eq_Int64"(%5 : $Builtin.Int64, %4 : $Builtin.Int64) : $Builtin.Int1 // user: %8
  %7 = integer_literal $Builtin.Int1, 0           // users: %15, %8
  %8 = builtin "int_expect_Int1"(%6 : $Builtin.Int1, %7 : $Builtin.Int1) : $Builtin.Int1 // user: %9
  cond_br %8, bb6, bb1                            // id: %9

bb1:                                              // Preds: bb0
  %10 = integer_literal $Builtin.Int64, -9223372036854775808 // user: %11
  %11 = builtin "cmp_eq_Int64"(%3 : $Builtin.Int64, %10 : $Builtin.Int64) : $Builtin.Int1 // user: %12
  cond_br %11, bb2, bb3                           // id: %12

bb2:                                              // Preds: bb1
  %13 = integer_literal $Builtin.Int64, -1        // user: %14
  %14 = builtin "cmp_eq_Int64"(%5 : $Builtin.Int64, %13 : $Builtin.Int64) : $Builtin.Int1 // user: %15
  %15 = builtin "int_expect_Int1"(%14 : $Builtin.Int1, %7 : $Builtin.Int1) : $Builtin.Int1 // user: %16
  cond_br %15, bb4, bb3                           // id: %16

bb3:                                              // Preds: bb2 bb1
  %17 = builtin "srem_Int64"(%3 : $Builtin.Int64, %5 : $Builtin.Int64) : $Builtin.Int64 // user: %18
  %18 = struct $Int (%17 : $Builtin.Int64)        // user: %19
  return %18 : $Int                               // id: %19

bb4:                                              // Preds: bb2
  %20 = string_literal utf8 "Division results in an overflow in remainder operation" // user: %22
  %21 = integer_literal $Builtin.Word, 54         // user: %24
  %22 = builtin "ptrtoint_Word"(%20 : $Builtin.RawPointer) : $Builtin.Word // user: %24
  %23 = integer_literal $Builtin.Int8, 2          // users: %35, %28, %24
  %24 = struct $StaticString (%22 : $Builtin.Word, %21 : $Builtin.Word, %23 : $Builtin.Int8) // user: %39
  %25 = string_literal utf8 "/BuildRoot/Library/Caches/com.apple.xbs/Binaries/swiftlang_Fall2018/install/TempContent/Objects/BNI_assert_lightweight/swift-macosx-x86_64/stdlib/public/core/8/Integers.swift" // user: %27
  %26 = integer_literal $Builtin.Word, 174        // user: %28
  %27 = builtin "ptrtoint_Word"(%25 : $Builtin.RawPointer) : $Builtin.Word // user: %28
  %28 = struct $StaticString (%27 : $Builtin.Word, %26 : $Builtin.Word, %23 : $Builtin.Int8) // user: %39
  %29 = integer_literal $Builtin.Int64, 20107     // user: %30
  %30 = struct $UInt (%29 : $Builtin.Int64)       // user: %39
  br bb5                                          // id: %31

bb5:                                              // Preds: bb4
  %32 = string_literal utf8 "Fatal error"         // user: %34
  %33 = integer_literal $Builtin.Word, 11         // user: %35
  %34 = builtin "ptrtoint_Word"(%32 : $Builtin.RawPointer) : $Builtin.Word // user: %35
  %35 = struct $StaticString (%34 : $Builtin.Word, %33 : $Builtin.Word, %23 : $Builtin.Int8) // user: %39
  %36 = integer_literal $Builtin.Int32, 1         // user: %37
  %37 = struct $UInt32 (%36 : $Builtin.Int32)     // user: %39
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %38 = function_ref @$Ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %39
  %39 = apply %38(%35, %24, %28, %30, %37) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %40

bb6:                                              // Preds: bb0
  %41 = string_literal utf8 "Division by zero in remainder operation" // user: %43
  %42 = integer_literal $Builtin.Word, 39         // user: %45
  %43 = builtin "ptrtoint_Word"(%41 : $Builtin.RawPointer) : $Builtin.Word // user: %45
  %44 = integer_literal $Builtin.Int8, 2          // users: %56, %49, %45
  %45 = struct $StaticString (%43 : $Builtin.Word, %42 : $Builtin.Word, %44 : $Builtin.Int8) // user: %60
  %46 = string_literal utf8 "/BuildRoot/Library/Caches/com.apple.xbs/Binaries/swiftlang_Fall2018/install/TempContent/Objects/BNI_assert_lightweight/swift-macosx-x86_64/stdlib/public/core/8/Integers.swift" // user: %48
  %47 = integer_literal $Builtin.Word, 174        // user: %49
  %48 = builtin "ptrtoint_Word"(%46 : $Builtin.RawPointer) : $Builtin.Word // user: %49
  %49 = struct $StaticString (%48 : $Builtin.Word, %47 : $Builtin.Word, %44 : $Builtin.Int8) // user: %60
  %50 = integer_literal $Builtin.Int64, 20102     // user: %51
  %51 = struct $UInt (%50 : $Builtin.Int64)       // user: %60
  br bb7                                          // id: %52

bb7:                                              // Preds: bb6
  %53 = string_literal utf8 "Fatal error"         // user: %55
  %54 = integer_literal $Builtin.Word, 11         // user: %56
  %55 = builtin "ptrtoint_Word"(%53 : $Builtin.RawPointer) : $Builtin.Word // user: %56
  %56 = struct $StaticString (%55 : $Builtin.Word, %54 : $Builtin.Word, %44 : $Builtin.Int8) // user: %60
  %57 = integer_literal $Builtin.Int32, 1         // user: %58
  %58 = struct $UInt32 (%57 : $Builtin.Int32)     // user: %60
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %59 = function_ref @$Ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %60
  %60 = apply %59(%56, %45, %49, %51, %58) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %61
} // end sil function '$SSi1roiyS2i_SitFZ'

// static Int.== infix(_:_:)
sil public_external [transparent] [serialized] @$SSi2eeoiySbSi_SitFZ : $@convention(method) (Int, Int, @thin Int.Type) -> Bool {
// %0                                             // user: %3
// %1                                             // user: %4
bb0(%0 : $Int, %1 : $Int, %2 : $@thin Int.Type):
  %3 = struct_extract %0 : $Int, #Int._value      // user: %5
  %4 = struct_extract %1 : $Int, #Int._value      // user: %5
  %5 = builtin "cmp_eq_Int64"(%3 : $Builtin.Int64, %4 : $Builtin.Int64) : $Builtin.Int1 // user: %6
  %6 = struct $Bool (%5 : $Builtin.Int1)          // user: %7
  return %6 : $Bool                               // id: %7
} // end sil function '$SSi2eeoiySbSi_SitFZ'

// Bool._getBuiltinLogicValue()
sil public_external [transparent] [serialized] @$SSb21_getBuiltinLogicValueBi1_yF : $@convention(method) (Bool) -> Builtin.Int1 {
// %0                                             // user: %1
bb0(%0 : $Bool):
  %1 = struct_extract %0 : $Bool, #Bool._value    // user: %2
  return %1 : $Builtin.Int1                       // id: %2
} // end sil function '$SSb21_getBuiltinLogicValueBi1_yF'

// String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
sil [serialized] [always_inline] [readonly] [_semantics "string.makeUTF8"] @$SSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String

// String.init<A>(_:)
sil [serialized] @$SSSySSxcs25LosslessStringConvertibleRzlufC : $@convention(method) <τ_0_0 where τ_0_0 : LosslessStringConvertible> (@in τ_0_0, @thin String.Type) -> @owned String

// static Strideable<>.... infix(_:_:)
sil public_external [transparent] [serialized] @$SSxsSZ6StrideRpzrlE3zzzoiySNyxGx_xtFZ : $@convention(method) <Self where Self : Strideable, Self.Stride : SignedInteger> (@in_guaranteed Self, @in_guaranteed Self, @thick Self.Type) -> @out ClosedRange<Self> {
// %0                                             // user: %38
// %1                                             // users: %34, %18
// %2                                             // users: %36, %18
bb0(%0 : $*ClosedRange<Self>, %1 : $*Self, %2 : $*Self, %3 : $@thick Self.Type):
  %4 = string_literal utf8 "Can't form Range with upperBound < lowerBound" // user: %6
  %5 = integer_literal $Builtin.Word, 45          // user: %8
  %6 = builtin "ptrtoint_Word"(%4 : $Builtin.RawPointer) : $Builtin.Word // user: %8
  %7 = integer_literal $Builtin.Int8, 2           // users: %26, %12, %8
  %8 = struct $StaticString (%6 : $Builtin.Word, %5 : $Builtin.Word, %7 : $Builtin.Int8) // user: %30
  %9 = string_literal utf8 "/BuildRoot/Library/Caches/com.apple.xbs/Sources/swiftlang_Fall2018/swiftlang_Fall2018-1000.11.37.1/src/swift/stdlib/public/core/ClosedRange.swift" // user: %11
  %10 = integer_literal $Builtin.Word, 145        // user: %12
  %11 = builtin "ptrtoint_Word"(%9 : $Builtin.RawPointer) : $Builtin.Word // user: %12
  %12 = struct $StaticString (%11 : $Builtin.Word, %10 : $Builtin.Word, %7 : $Builtin.Int8) // user: %30
  %13 = integer_literal $Builtin.Int64, 369       // user: %14
  %14 = struct $UInt (%13 : $Builtin.Int64)       // user: %30
  br bb1                                          // id: %15

bb1:                                              // Preds: bb0
  %16 = metatype $@thick Self.Type                // user: %18
  %17 = witness_method $Self, #Comparable."<="!1 : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %18
  %18 = apply %17<Self>(%1, %2, %16) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %20
  %19 = integer_literal $Builtin.Int1, -1         // user: %21
  %20 = struct_extract %18 : $Bool, #Bool._value  // user: %21
  %21 = builtin "int_expect_Int1"(%20 : $Builtin.Int1, %19 : $Builtin.Int1) : $Builtin.Int1 // user: %22
  cond_br %21, bb3, bb2                           // id: %22

bb2:                                              // Preds: bb1
  %23 = string_literal utf8 "Fatal error"         // user: %25
  %24 = integer_literal $Builtin.Word, 11         // user: %26
  %25 = builtin "ptrtoint_Word"(%23 : $Builtin.RawPointer) : $Builtin.Word // user: %26
  %26 = struct $StaticString (%25 : $Builtin.Word, %24 : $Builtin.Word, %7 : $Builtin.Int8) // user: %30
  %27 = integer_literal $Builtin.Int32, 1         // user: %28
  %28 = struct $UInt32 (%27 : $Builtin.Int32)     // user: %30
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %29 = function_ref @$Ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %30
  %30 = apply %29(%26, %8, %12, %14, %28) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %31

bb3:                                              // Preds: bb1
  %32 = metatype $@thin ClosedRange<Self>.Type    // user: %38
  %33 = alloc_stack $Self                         // users: %40, %38, %34
  copy_addr %1 to [initialization] %33 : $*Self   // id: %34
  %35 = alloc_stack $Self                         // users: %39, %38, %36
  copy_addr %2 to [initialization] %35 : $*Self   // id: %36
  // function_ref ClosedRange.init(uncheckedBounds:)
  %37 = function_ref @$SSN15uncheckedBoundsSNyxGx5lower_x5uppert_tcfC : $@convention(method) <τ_0_0 where τ_0_0 : Comparable> (@in τ_0_0, @in τ_0_0, @thin ClosedRange<τ_0_0>.Type) -> @out ClosedRange<τ_0_0> // user: %38
  %38 = apply %37<Self>(%0, %33, %35, %32) : $@convention(method) <τ_0_0 where τ_0_0 : Comparable> (@in τ_0_0, @in τ_0_0, @thin ClosedRange<τ_0_0>.Type) -> @out ClosedRange<τ_0_0>
  dealloc_stack %35 : $*Self                      // id: %39
  dealloc_stack %33 : $*Self                      // id: %40
  %41 = tuple ()                                  // user: %42
  return %41 : $()                                // id: %42
} // end sil function '$SSxsSZ6StrideRpzrlE3zzzoiySNyxGx_xtFZ'

// Collection<>.makeIterator()
sil [serialized] [always_inline] @$SSlss16IndexingIteratorVyxG0B0RtzrlE04makeB0ACyF : $@convention(method) <τ_0_0 where τ_0_0 : Collection, τ_0_0.Iterator == IndexingIterator<τ_0_0>> (@in_guaranteed τ_0_0) -> @out IndexingIterator<τ_0_0>

// IndexingIterator.next()
sil [serialized] [always_inline] @$Ss16IndexingIteratorV4next7ElementQzSgyF : $@convention(method) <τ_0_0 where τ_0_0 : Collection> (@inout IndexingIterator<τ_0_0>) -> @out Optional<τ_0_0.Element>

// _allocateUninitializedArray<A>(_:)
sil [serialized] [always_inline] @$Ss27_allocateUninitializedArrayySayxG_BptBwlF : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer)

// default argument 1 of print(_:separator:terminator:)
sil [noinline] @$Ss5print_9separator10terminatoryypd_S2StFfA0_ : $@convention(thin) () -> @owned String

// default argument 2 of print(_:separator:terminator:)
sil [noinline] @$Ss5print_9separator10terminatoryypd_S2StFfA1_ : $@convention(thin) () -> @owned String

// print(_:separator:terminator:)
sil [noinline] @$Ss5print_9separator10terminatoryypd_S2StF : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> ()

// _fatalErrorMessage(_:_:file:line:flags:)
sil [noinline] [_semantics "arc.programtermination_point"] @$Ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never

// ClosedRange.init(uncheckedBounds:)
sil [serialized] @$SSN15uncheckedBoundsSNyxGx5lower_x5uppert_tcfC : $@convention(method) <τ_0_0 where τ_0_0 : Comparable> (@in τ_0_0, @in τ_0_0, @thin ClosedRange<τ_0_0>.Type) -> @out ClosedRange<τ_0_0>

// protocol witness for static Comparable.< infix(_:_:) in conformance Int
sil shared_external [transparent] [serialized] [thunk] @$SSiSLsSL1loiySbx_xtFZTW : $@convention(witness_method: Comparable) (@in_guaranteed Int, @in_guaranteed Int, @thick Int.Type) -> Bool {
// %0                                             // user: %3
// %1                                             // user: %5
bb0(%0 : $*Int, %1 : $*Int, %2 : $@thick Int.Type):
  %3 = struct_element_addr %0 : $*Int, #Int._value // user: %4
  %4 = load %3 : $*Builtin.Int64                  // user: %7
  %5 = struct_element_addr %1 : $*Int, #Int._value // user: %6
  %6 = load %5 : $*Builtin.Int64                  // user: %7
  %7 = builtin "cmp_slt_Int64"(%4 : $Builtin.Int64, %6 : $Builtin.Int64) : $Builtin.Int1 // user: %8
  %8 = struct $Bool (%7 : $Builtin.Int1)          // user: %9
  return %8 : $Bool                               // id: %9
} // end sil function '$SSiSLsSL1loiySbx_xtFZTW'

// protocol witness for static Comparable.<= infix(_:_:) in conformance Int
sil shared_external [transparent] [serialized] [thunk] [always_inline] @$SSiSLsSL2leoiySbx_xtFZTW : $@convention(witness_method: Comparable) (@in_guaranteed Int, @in_guaranteed Int, @thick Int.Type) -> Bool {
// %0                                             // user: %3
// %1                                             // user: %5
bb0(%0 : $*Int, %1 : $*Int, %2 : $@thick Int.Type):
  %3 = struct_element_addr %0 : $*Int, #Int._value // user: %4
  %4 = load %3 : $*Builtin.Int64                  // user: %7
  %5 = struct_element_addr %1 : $*Int, #Int._value // user: %6
  %6 = load %5 : $*Builtin.Int64                  // user: %7
  %7 = builtin "cmp_slt_Int64"(%6 : $Builtin.Int64, %4 : $Builtin.Int64) : $Builtin.Int1 // user: %9
  %8 = integer_literal $Builtin.Int1, -1          // user: %9
  %9 = builtin "xor_Int1"(%7 : $Builtin.Int1, %8 : $Builtin.Int1) : $Builtin.Int1 // user: %10
  %10 = struct $Bool (%9 : $Builtin.Int1)         // user: %11
  return %10 : $Bool                              // id: %11
} // end sil function '$SSiSLsSL2leoiySbx_xtFZTW'

// protocol witness for static Comparable.>= infix(_:_:) in conformance Int
sil shared_external [transparent] [serialized] [thunk] [always_inline] @$SSiSLsSL2geoiySbx_xtFZTW : $@convention(witness_method: Comparable) (@in_guaranteed Int, @in_guaranteed Int, @thick Int.Type) -> Bool {
// %0                                             // user: %3
// %1                                             // user: %5
bb0(%0 : $*Int, %1 : $*Int, %2 : $@thick Int.Type):
  %3 = struct_element_addr %0 : $*Int, #Int._value // user: %4
  %4 = load %3 : $*Builtin.Int64                  // user: %7
  %5 = struct_element_addr %1 : $*Int, #Int._value // user: %6
  %6 = load %5 : $*Builtin.Int64                  // user: %7
  %7 = builtin "cmp_slt_Int64"(%4 : $Builtin.Int64, %6 : $Builtin.Int64) : $Builtin.Int1 // user: %9
  %8 = integer_literal $Builtin.Int1, -1          // user: %9
  %9 = builtin "xor_Int1"(%7 : $Builtin.Int1, %8 : $Builtin.Int1) : $Builtin.Int1 // user: %10
  %10 = struct $Bool (%9 : $Builtin.Int1)         // user: %11
  return %10 : $Bool                              // id: %11
} // end sil function '$SSiSLsSL2geoiySbx_xtFZTW'

// protocol witness for static Comparable.> infix(_:_:) in conformance Int
sil shared_external [transparent] [serialized] [thunk] [always_inline] @$SSiSLsSL1goiySbx_xtFZTW : $@convention(witness_method: Comparable) (@in_guaranteed Int, @in_guaranteed Int, @thick Int.Type) -> Bool {
// %0                                             // user: %3
// %1                                             // user: %5
bb0(%0 : $*Int, %1 : $*Int, %2 : $@thick Int.Type):
  %3 = struct_element_addr %0 : $*Int, #Int._value // user: %4
  %4 = load %3 : $*Builtin.Int64                  // user: %7
  %5 = struct_element_addr %1 : $*Int, #Int._value // user: %6
  %6 = load %5 : $*Builtin.Int64                  // user: %7
  %7 = builtin "cmp_slt_Int64"(%6 : $Builtin.Int64, %4 : $Builtin.Int64) : $Builtin.Int1 // user: %8
  %8 = struct $Bool (%7 : $Builtin.Int1)          // user: %9
  return %8 : $Bool                               // id: %9
} // end sil function '$SSiSLsSL1goiySbx_xtFZTW'

// specialized ClosedRange.init(uncheckedBounds:)
sil @$SSN15uncheckedBoundsSNyxGx5lower_x5uppert_tcfCSi_Tg5 : $@convention(method) (Int, Int, @thin ClosedRange<Int>.Type) -> ClosedRange<Int>

// specialized Collection<>.makeIterator()
sil [always_inline] @$SSlss16IndexingIteratorVyxG0B0RtzrlE04makeB0ACyFSNySiG_Tg5 : $@convention(method) (ClosedRange<Int>) -> IndexingIterator<ClosedRange<Int>>

// specialized IndexingIterator.next()
sil [always_inline] @$Ss16IndexingIteratorV4next7ElementQzSgyFSNySiG_Tg5 : $@convention(method) (@inout IndexingIterator<ClosedRange<Int>>) -> Optional<Int>

// specialized _allocateUninitializedArray<A>(_:)
sil [always_inline] @$Ss27_allocateUninitializedArrayySayxG_BptBwlFyp_Tg5 : $@convention(thin) (Builtin.Word) -> (@owned Array<Any>, Builtin.RawPointer)

sil_witness_table public_external [serialized] Int: Comparable module Swift {
  base_protocol Equatable: Int: Equatable module Swift
  method #Comparable."<"!1: <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : @$SSiSLsSL1loiySbx_xtFZTW	// protocol witness for static Comparable.< infix(_:_:) in conformance Int
  method #Comparable."<="!1: <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : @$SSiSLsSL2leoiySbx_xtFZTW	// protocol witness for static Comparable.<= infix(_:_:) in conformance Int
  method #Comparable.">="!1: <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : @$SSiSLsSL2geoiySbx_xtFZTW	// protocol witness for static Comparable.>= infix(_:_:) in conformance Int
  method #Comparable.">"!1: <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : @$SSiSLsSL1goiySbx_xtFZTW	// protocol witness for static Comparable.> infix(_:_:) in conformance Int
}



